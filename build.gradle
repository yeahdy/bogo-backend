plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.8'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}


jar {
    enabled = false
}

dependencies {
    // Web And Devtools
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-quartz:3.3.0'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    // Jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'


    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation 'com.querydsl:querydsl-sql:5.0.0'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    //FCM
    implementation 'com.google.firebase:firebase-admin:9.3.0'

    // Test
    testImplementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    testImplementation 'com.tngtech.archunit:archunit:1.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'io.rest-assured:spring-mock-mvc:3.3.0'
    testImplementation 'org.mockito:mockito-core:5.13.0'
}

tasks.named('test') {
    useJUnitPlatform()
    doFirst {
        println snippetsDir
        def snippetsDirFile = file(snippetsDir)
        if (!snippetsDirFile.exists()) {
            snippetsDirFile.mkdirs()
        }
    }
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport // report is always generated after tests run
}


asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
    outputDir file('build/docs/asciidoc')
}

bootJar {
    dependsOn asciidoctor
    archiveFileName = 'application.jar'
}

tasks.register('copyRestdocs', Copy) {
    dependsOn bootJar
    mustRunAfter(tasks.jacocoTestReport)
    mustRunAfter(tasks.asciidoctor)

    from file("${asciidoctor.outputDir}")
    into file("build/resources/main/static/docs")
}

tasks.register('createDocument', Copy) {
    dependsOn asciidoctor
    delete file("src/main/resources/static/docs")

    from file("${asciidoctor.outputDir}")
    into file("src/main/resources/static/docs")
}

compileJava {
    options.compilerArgs += [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

tasks.processResources.outputs.upToDateWhen { false }

processResources.dependsOn('copySubmodule')

tasks.register('copySubmodule', Copy) {

    from('./board-submodule/backend') {
        include('*.yml', '*.json')
    }
    into('src/main/resources')
}


tasks.register('addSubmodule', Exec) {
    workingDir './script'
    commandLine 'sh', './commit-submodule.sh'
}

//Querydsl Q Class 생성 위치
def generated = 'src/main/generated'

//Querydsl Q Class 생성 위치 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//java source set 에 Querydsl Q Class 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

//gradle clean 시, Q Class 디렉토리까지 삭제하도록 설정
clean {
    delete file(generated)
    delete file("out")
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}


// 테스트 커버리지 검증에 따른 jacoco 테스트 성공/실패 여부
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"   //class 별로 검사

            // 테스트 코드 커버 비율 설정 (70% 이상일 경우에만 jacoco의 테스트 성공)
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.7)
            }

            //class 당 코드 전체 라인이 최대 100 줄까지 가능
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(200)
            }

            excludes = List.of(
                    ".controller.",
                    ".dto.",
                    ".exception.",
                    "com.boardgo.BoardgoApplication"
            )
        }
    }
}

tasks.configureEach {
    if (name.contains("spotless")) {
        mustRunAfter(tasks.compileJava)
        mustRunAfter(tasks.processResources)
        mustRunAfter(tasks.processTestResources)
        mustRunAfter(tasks.jacocoTestReport)
        mustRunAfter(tasks.asciidoctor)
    }
}

spotless {
    java {
        target project.fileTree(project.rootDir) {
            include '**/*.java'
            exclude 'src/*/generated/**/*.*'
        }

        googleJavaFormat().aosp()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()

    }
}

tasks.register('copyPreCommit', Copy) {
    from 'script/pre-commit'
    into '.git/hooks'
}
